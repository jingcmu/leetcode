class Solution {
public:
	vector<string> fullJustify(vector<string> &words, int L) {
		vector<string> result;
		const int n = words.size();
		int begin = 0, len = 0; // 当前行的起点，当前长度
		for (int i = 0; i < n; ++i) {
			if (len + words[i].size() + (i - begin) > L) {
				result.push_back(connect(words, begin, i - 1, len, L, false));
				begin = i;
				len = 0;
			}
			len += words[i].size();
		}
		// 最后一行不足L
		result.push_back(connect(words, begin, n - 1, len, L, true));
		return result;
	}

	/**
	* @brief 将words[begin, end] 连成一行
	* @param[in] words 单词列表
	* @param[in] begin 开始
	* @param[in] end 结束
	* @param[in] len words[begin, end] 所有单词加起来的长度
	* @param[in] L 题目规定的一行长度
	* @param[in] is_last 是否是最后一行
	* @return 对齐后的当前行
	*/
	string connect(vector<string> &words, int begin, int end, int len, int L, bool is_last) {
		string s;
		int n = end - begin + 1; //待连接的单词个数
		for (int i = 0; i < n; ++i) {
			s += words[begin + i];
			addSpaces(s, i, n - 1, L - len, is_last); //i是间隔索引，n-1是间隔总数
		}
		if (s.size() < L) s.append(L - s.size(), ' ');
		return s;
	}

	/**
	* @brief 添加空格，将L长度的空格尽量均匀的分配到n个间隙当中
	* @param[inout]s 一行
	* @param[in] i 当前空隙的序号
	* @param[in] n 空隙总数
	* @param[in] L 总共需要添加的空额数
	* @param[in] is_last 是否是最后一行
	* @return 无
	*/
	void addSpaces(string &s, int i, int n, int L, bool is_last) {
		if (n < 1 || i > n - 1) return;
		//i < (L % n) ? 1 : 0 这个太巧妙了
		int spaces = is_last ? 1 : (L / n + (i < (L % n) ? 1 : 0));
		s.append(spaces, ' ');
	}
};